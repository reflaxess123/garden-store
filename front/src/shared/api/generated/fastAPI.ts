/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * FastAPI
 * OpenAPI spec version: 0.1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CartItemAdd,
  CartItemInDB,
  CartItemUpdate,
  CartItemWithProduct,
  CartMergeRequest,
  CategoryCreate,
  CategoryInDB,
  CategoryUpdate,
  ChatInDB,
  ChatMessageInDB,
  ChatMessageSend,
  CustomUser,
  FavouriteInDB,
  GetBestsellersApiProductsBestsellersGetParams,
  GetCategoriesApiCategoriesGetParams,
  GetProductsByCategorySlugApiProductsCategoryCategorySlugGetParams,
  GetUserNotificationsApiNotificationsGetParams,
  HTTPValidationError,
  NotificationInDB,
  NotificationUpdate,
  OrderCreate,
  OrderDelete,
  OrderEdit,
  OrderInDB,
  OrderUpdateStatus,
  ProductCreate,
  ProductInDB,
  ProductOfflineUpdate,
  ProductUpdate,
  ResetPasswordSchema,
  SignInSchema,
  SignUpSchema,
  Token,
  UpdatePasswordSchema,
  UserCreate,
  UserInDB,
  UserUpdate
} from './model';

import { customInstance } from '../orvalInstance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Signup
 */
export const signupApiAuthSignupPost = (
    signUpSchema: SignUpSchema,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CustomUser>(
      {url: `/api/auth/signup`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signUpSchema, signal
    },
      options);
    }
  


export const getSignupApiAuthSignupPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signupApiAuthSignupPost>>, TError,{data: SignUpSchema}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof signupApiAuthSignupPost>>, TError,{data: SignUpSchema}, TContext> => {

const mutationKey = ['signupApiAuthSignupPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signupApiAuthSignupPost>>, {data: SignUpSchema}> = (props) => {
          const {data} = props ?? {};

          return  signupApiAuthSignupPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SignupApiAuthSignupPostMutationResult = NonNullable<Awaited<ReturnType<typeof signupApiAuthSignupPost>>>
    export type SignupApiAuthSignupPostMutationBody = SignUpSchema
    export type SignupApiAuthSignupPostMutationError = HTTPValidationError

    /**
 * @summary Signup
 */
export const useSignupApiAuthSignupPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signupApiAuthSignupPost>>, TError,{data: SignUpSchema}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof signupApiAuthSignupPost>>,
        TError,
        {data: SignUpSchema},
        TContext
      > => {

      const mutationOptions = getSignupApiAuthSignupPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Signin
 */
export const signinApiAuthSigninPost = (
    signInSchema: SignInSchema,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<Token>(
      {url: `/api/auth/signin`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: signInSchema, signal
    },
      options);
    }
  


export const getSigninApiAuthSigninPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signinApiAuthSigninPost>>, TError,{data: SignInSchema}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof signinApiAuthSigninPost>>, TError,{data: SignInSchema}, TContext> => {

const mutationKey = ['signinApiAuthSigninPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof signinApiAuthSigninPost>>, {data: SignInSchema}> = (props) => {
          const {data} = props ?? {};

          return  signinApiAuthSigninPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SigninApiAuthSigninPostMutationResult = NonNullable<Awaited<ReturnType<typeof signinApiAuthSigninPost>>>
    export type SigninApiAuthSigninPostMutationBody = SignInSchema
    export type SigninApiAuthSigninPostMutationError = HTTPValidationError

    /**
 * @summary Signin
 */
export const useSigninApiAuthSigninPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof signinApiAuthSigninPost>>, TError,{data: SignInSchema}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof signinApiAuthSigninPost>>,
        TError,
        {data: SignInSchema},
        TContext
      > => {

      const mutationOptions = getSigninApiAuthSigninPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Logout
 */
export const logoutApiAuthLogoutPost = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/auth/logout`, method: 'POST', signal
    },
      options);
    }
  


export const getLogoutApiAuthLogoutPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>, TError,void, TContext> => {

const mutationKey = ['logoutApiAuthLogoutPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>, void> = () => {
          

          return  logoutApiAuthLogoutPost(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type LogoutApiAuthLogoutPostMutationResult = NonNullable<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>>
    
    export type LogoutApiAuthLogoutPostMutationError = unknown

    /**
 * @summary Logout
 */
export const useLogoutApiAuthLogoutPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof logoutApiAuthLogoutPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getLogoutApiAuthLogoutPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Reset Password
 */
export const resetPasswordApiAuthResetPasswordPost = (
    resetPasswordSchema: ResetPasswordSchema,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/auth/reset-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: resetPasswordSchema, signal
    },
      options);
    }
  


export const getResetPasswordApiAuthResetPasswordPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetPasswordApiAuthResetPasswordPost>>, TError,{data: ResetPasswordSchema}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof resetPasswordApiAuthResetPasswordPost>>, TError,{data: ResetPasswordSchema}, TContext> => {

const mutationKey = ['resetPasswordApiAuthResetPasswordPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof resetPasswordApiAuthResetPasswordPost>>, {data: ResetPasswordSchema}> = (props) => {
          const {data} = props ?? {};

          return  resetPasswordApiAuthResetPasswordPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ResetPasswordApiAuthResetPasswordPostMutationResult = NonNullable<Awaited<ReturnType<typeof resetPasswordApiAuthResetPasswordPost>>>
    export type ResetPasswordApiAuthResetPasswordPostMutationBody = ResetPasswordSchema
    export type ResetPasswordApiAuthResetPasswordPostMutationError = HTTPValidationError

    /**
 * @summary Reset Password
 */
export const useResetPasswordApiAuthResetPasswordPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof resetPasswordApiAuthResetPasswordPost>>, TError,{data: ResetPasswordSchema}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof resetPasswordApiAuthResetPasswordPost>>,
        TError,
        {data: ResetPasswordSchema},
        TContext
      > => {

      const mutationOptions = getResetPasswordApiAuthResetPasswordPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Update Password
 */
export const updatePasswordApiAuthUpdatePasswordPost = (
    updatePasswordSchema: UpdatePasswordSchema,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/auth/update-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: updatePasswordSchema, signal
    },
      options);
    }
  


export const getUpdatePasswordApiAuthUpdatePasswordPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePasswordApiAuthUpdatePasswordPost>>, TError,{data: UpdatePasswordSchema}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updatePasswordApiAuthUpdatePasswordPost>>, TError,{data: UpdatePasswordSchema}, TContext> => {

const mutationKey = ['updatePasswordApiAuthUpdatePasswordPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updatePasswordApiAuthUpdatePasswordPost>>, {data: UpdatePasswordSchema}> = (props) => {
          const {data} = props ?? {};

          return  updatePasswordApiAuthUpdatePasswordPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdatePasswordApiAuthUpdatePasswordPostMutationResult = NonNullable<Awaited<ReturnType<typeof updatePasswordApiAuthUpdatePasswordPost>>>
    export type UpdatePasswordApiAuthUpdatePasswordPostMutationBody = UpdatePasswordSchema
    export type UpdatePasswordApiAuthUpdatePasswordPostMutationError = HTTPValidationError

    /**
 * @summary Update Password
 */
export const useUpdatePasswordApiAuthUpdatePasswordPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updatePasswordApiAuthUpdatePasswordPost>>, TError,{data: UpdatePasswordSchema}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updatePasswordApiAuthUpdatePasswordPost>>,
        TError,
        {data: UpdatePasswordSchema},
        TContext
      > => {

      const mutationOptions = getUpdatePasswordApiAuthUpdatePasswordPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 * @summary Get Current User Info
 */
export const getCurrentUserInfoApiAuthMeGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CustomUser>(
      {url: `/api/auth/me`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCurrentUserInfoApiAuthMeGetQueryKey = () => {
    return [`/api/auth/me`] as const;
    }

    
export const getGetCurrentUserInfoApiAuthMeGetQueryOptions = <TData = Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCurrentUserInfoApiAuthMeGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>> = ({ signal }) => getCurrentUserInfoApiAuthMeGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCurrentUserInfoApiAuthMeGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>>
export type GetCurrentUserInfoApiAuthMeGetQueryError = unknown


export function useGetCurrentUserInfoApiAuthMeGet<TData = Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCurrentUserInfoApiAuthMeGet<TData = Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>,
          TError,
          Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCurrentUserInfoApiAuthMeGet<TData = Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Current User Info
 */

export function useGetCurrentUserInfoApiAuthMeGet<TData = Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCurrentUserInfoApiAuthMeGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCurrentUserInfoApiAuthMeGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Admin Categories
 */
export const getAdminCategoriesApiAdminCategoriesGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CategoryInDB[]>(
      {url: `/api/admin/categories`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminCategoriesApiAdminCategoriesGetQueryKey = () => {
    return [`/api/admin/categories`] as const;
    }

    
export const getGetAdminCategoriesApiAdminCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminCategoriesApiAdminCategoriesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>> = ({ signal }) => getAdminCategoriesApiAdminCategoriesGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminCategoriesApiAdminCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>>
export type GetAdminCategoriesApiAdminCategoriesGetQueryError = unknown


export function useGetAdminCategoriesApiAdminCategoriesGet<TData = Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminCategoriesApiAdminCategoriesGet<TData = Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminCategoriesApiAdminCategoriesGet<TData = Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Categories
 */

export function useGetAdminCategoriesApiAdminCategoriesGet<TData = Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategoriesApiAdminCategoriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminCategoriesApiAdminCategoriesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create Admin Category
 */
export const createAdminCategoryApiAdminCategoriesPost = (
    categoryCreate: CategoryCreate,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CategoryInDB>(
      {url: `/api/admin/categories`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: categoryCreate, signal
    },
      options);
    }
  


export const getCreateAdminCategoryApiAdminCategoriesPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminCategoryApiAdminCategoriesPost>>, TError,{data: CategoryCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createAdminCategoryApiAdminCategoriesPost>>, TError,{data: CategoryCreate}, TContext> => {

const mutationKey = ['createAdminCategoryApiAdminCategoriesPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAdminCategoryApiAdminCategoriesPost>>, {data: CategoryCreate}> = (props) => {
          const {data} = props ?? {};

          return  createAdminCategoryApiAdminCategoriesPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAdminCategoryApiAdminCategoriesPostMutationResult = NonNullable<Awaited<ReturnType<typeof createAdminCategoryApiAdminCategoriesPost>>>
    export type CreateAdminCategoryApiAdminCategoriesPostMutationBody = CategoryCreate
    export type CreateAdminCategoryApiAdminCategoriesPostMutationError = HTTPValidationError

    /**
 * @summary Create Admin Category
 */
export const useCreateAdminCategoryApiAdminCategoriesPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminCategoryApiAdminCategoriesPost>>, TError,{data: CategoryCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAdminCategoryApiAdminCategoriesPost>>,
        TError,
        {data: CategoryCreate},
        TContext
      > => {

      const mutationOptions = getCreateAdminCategoryApiAdminCategoriesPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Update Admin Category
 */
export const updateAdminCategoryApiAdminCategoriesCategoryIdPatch = (
    categoryId: string,
    categoryUpdate: CategoryUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CategoryInDB>(
      {url: `/api/admin/categories/${categoryId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: categoryUpdate
    },
      options);
    }
  


export const getUpdateAdminCategoryApiAdminCategoriesCategoryIdPatchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminCategoryApiAdminCategoriesCategoryIdPatch>>, TError,{categoryId: string;data: CategoryUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateAdminCategoryApiAdminCategoriesCategoryIdPatch>>, TError,{categoryId: string;data: CategoryUpdate}, TContext> => {

const mutationKey = ['updateAdminCategoryApiAdminCategoriesCategoryIdPatch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAdminCategoryApiAdminCategoriesCategoryIdPatch>>, {categoryId: string;data: CategoryUpdate}> = (props) => {
          const {categoryId,data} = props ?? {};

          return  updateAdminCategoryApiAdminCategoriesCategoryIdPatch(categoryId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAdminCategoryApiAdminCategoriesCategoryIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdminCategoryApiAdminCategoriesCategoryIdPatch>>>
    export type UpdateAdminCategoryApiAdminCategoriesCategoryIdPatchMutationBody = CategoryUpdate
    export type UpdateAdminCategoryApiAdminCategoriesCategoryIdPatchMutationError = HTTPValidationError

    /**
 * @summary Update Admin Category
 */
export const useUpdateAdminCategoryApiAdminCategoriesCategoryIdPatch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminCategoryApiAdminCategoriesCategoryIdPatch>>, TError,{categoryId: string;data: CategoryUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAdminCategoryApiAdminCategoriesCategoryIdPatch>>,
        TError,
        {categoryId: string;data: CategoryUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateAdminCategoryApiAdminCategoriesCategoryIdPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete Admin Category
 */
export const deleteAdminCategoryApiAdminCategoriesCategoryIdDelete = (
    categoryId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/admin/categories/${categoryId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminCategoryApiAdminCategoriesCategoryIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminCategoryApiAdminCategoriesCategoryIdDelete>>, TError,{categoryId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminCategoryApiAdminCategoriesCategoryIdDelete>>, TError,{categoryId: string}, TContext> => {

const mutationKey = ['deleteAdminCategoryApiAdminCategoriesCategoryIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminCategoryApiAdminCategoriesCategoryIdDelete>>, {categoryId: string}> = (props) => {
          const {categoryId} = props ?? {};

          return  deleteAdminCategoryApiAdminCategoriesCategoryIdDelete(categoryId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminCategoryApiAdminCategoriesCategoryIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminCategoryApiAdminCategoriesCategoryIdDelete>>>
    
    export type DeleteAdminCategoryApiAdminCategoriesCategoryIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Admin Category
 */
export const useDeleteAdminCategoryApiAdminCategoriesCategoryIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminCategoryApiAdminCategoriesCategoryIdDelete>>, TError,{categoryId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminCategoryApiAdminCategoriesCategoryIdDelete>>,
        TError,
        {categoryId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminCategoryApiAdminCategoriesCategoryIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get Admin Category
 */
export const getAdminCategoryApiAdminCategoriesCategoryIdGet = (
    categoryId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CategoryInDB>(
      {url: `/api/admin/categories/${categoryId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminCategoryApiAdminCategoriesCategoryIdGetQueryKey = (categoryId: string,) => {
    return [`/api/admin/categories/${categoryId}`] as const;
    }

    
export const getGetAdminCategoryApiAdminCategoriesCategoryIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>, TError = HTTPValidationError>(categoryId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminCategoryApiAdminCategoriesCategoryIdGetQueryKey(categoryId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>> = ({ signal }) => getAdminCategoryApiAdminCategoriesCategoryIdGet(categoryId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(categoryId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminCategoryApiAdminCategoriesCategoryIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>>
export type GetAdminCategoryApiAdminCategoriesCategoryIdGetQueryError = HTTPValidationError


export function useGetAdminCategoryApiAdminCategoriesCategoryIdGet<TData = Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>, TError = HTTPValidationError>(
 categoryId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminCategoryApiAdminCategoriesCategoryIdGet<TData = Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>, TError = HTTPValidationError>(
 categoryId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminCategoryApiAdminCategoriesCategoryIdGet<TData = Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>, TError = HTTPValidationError>(
 categoryId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Category
 */

export function useGetAdminCategoryApiAdminCategoriesCategoryIdGet<TData = Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>, TError = HTTPValidationError>(
 categoryId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminCategoryApiAdminCategoriesCategoryIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminCategoryApiAdminCategoriesCategoryIdGetQueryOptions(categoryId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Admin Products
 */
export const getAdminProductsApiAdminProductsGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ProductInDB[]>(
      {url: `/api/admin/products`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminProductsApiAdminProductsGetQueryKey = () => {
    return [`/api/admin/products`] as const;
    }

    
export const getGetAdminProductsApiAdminProductsGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminProductsApiAdminProductsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>> = ({ signal }) => getAdminProductsApiAdminProductsGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminProductsApiAdminProductsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>>
export type GetAdminProductsApiAdminProductsGetQueryError = unknown


export function useGetAdminProductsApiAdminProductsGet<TData = Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminProductsApiAdminProductsGet<TData = Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminProductsApiAdminProductsGet<TData = Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Products
 */

export function useGetAdminProductsApiAdminProductsGet<TData = Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminProductsApiAdminProductsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminProductsApiAdminProductsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create Admin Product
 */
export const createAdminProductApiAdminProductsPost = (
    productCreate: ProductCreate,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ProductInDB>(
      {url: `/api/admin/products`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: productCreate, signal
    },
      options);
    }
  


export const getCreateAdminProductApiAdminProductsPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminProductApiAdminProductsPost>>, TError,{data: ProductCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createAdminProductApiAdminProductsPost>>, TError,{data: ProductCreate}, TContext> => {

const mutationKey = ['createAdminProductApiAdminProductsPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAdminProductApiAdminProductsPost>>, {data: ProductCreate}> = (props) => {
          const {data} = props ?? {};

          return  createAdminProductApiAdminProductsPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAdminProductApiAdminProductsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createAdminProductApiAdminProductsPost>>>
    export type CreateAdminProductApiAdminProductsPostMutationBody = ProductCreate
    export type CreateAdminProductApiAdminProductsPostMutationError = HTTPValidationError

    /**
 * @summary Create Admin Product
 */
export const useCreateAdminProductApiAdminProductsPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminProductApiAdminProductsPost>>, TError,{data: ProductCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAdminProductApiAdminProductsPost>>,
        TError,
        {data: ProductCreate},
        TContext
      > => {

      const mutationOptions = getCreateAdminProductApiAdminProductsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get Admin Product
 */
export const getAdminProductApiAdminProductsProductIdGet = (
    productId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ProductInDB>(
      {url: `/api/admin/products/${productId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminProductApiAdminProductsProductIdGetQueryKey = (productId: string,) => {
    return [`/api/admin/products/${productId}`] as const;
    }

    
export const getGetAdminProductApiAdminProductsProductIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>, TError = HTTPValidationError>(productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminProductApiAdminProductsProductIdGetQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>> = ({ signal }) => getAdminProductApiAdminProductsProductIdGet(productId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(productId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminProductApiAdminProductsProductIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>>
export type GetAdminProductApiAdminProductsProductIdGetQueryError = HTTPValidationError


export function useGetAdminProductApiAdminProductsProductIdGet<TData = Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>, TError = HTTPValidationError>(
 productId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminProductApiAdminProductsProductIdGet<TData = Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>, TError = HTTPValidationError>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminProductApiAdminProductsProductIdGet<TData = Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>, TError = HTTPValidationError>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Product
 */

export function useGetAdminProductApiAdminProductsProductIdGet<TData = Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>, TError = HTTPValidationError>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminProductApiAdminProductsProductIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminProductApiAdminProductsProductIdGetQueryOptions(productId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Delete Admin Product
 */
export const deleteAdminProductApiAdminProductsProductIdDelete = (
    productId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/admin/products/${productId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminProductApiAdminProductsProductIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminProductApiAdminProductsProductIdDelete>>, TError,{productId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminProductApiAdminProductsProductIdDelete>>, TError,{productId: string}, TContext> => {

const mutationKey = ['deleteAdminProductApiAdminProductsProductIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminProductApiAdminProductsProductIdDelete>>, {productId: string}> = (props) => {
          const {productId} = props ?? {};

          return  deleteAdminProductApiAdminProductsProductIdDelete(productId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminProductApiAdminProductsProductIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminProductApiAdminProductsProductIdDelete>>>
    
    export type DeleteAdminProductApiAdminProductsProductIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Admin Product
 */
export const useDeleteAdminProductApiAdminProductsProductIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminProductApiAdminProductsProductIdDelete>>, TError,{productId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminProductApiAdminProductsProductIdDelete>>,
        TError,
        {productId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminProductApiAdminProductsProductIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Update Admin Product
 */
export const updateAdminProductApiAdminProductsProductIdPatch = (
    productId: string,
    productUpdate: ProductUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ProductInDB>(
      {url: `/api/admin/products/${productId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: productUpdate
    },
      options);
    }
  


export const getUpdateAdminProductApiAdminProductsProductIdPatchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminProductApiAdminProductsProductIdPatch>>, TError,{productId: string;data: ProductUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateAdminProductApiAdminProductsProductIdPatch>>, TError,{productId: string;data: ProductUpdate}, TContext> => {

const mutationKey = ['updateAdminProductApiAdminProductsProductIdPatch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAdminProductApiAdminProductsProductIdPatch>>, {productId: string;data: ProductUpdate}> = (props) => {
          const {productId,data} = props ?? {};

          return  updateAdminProductApiAdminProductsProductIdPatch(productId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAdminProductApiAdminProductsProductIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdminProductApiAdminProductsProductIdPatch>>>
    export type UpdateAdminProductApiAdminProductsProductIdPatchMutationBody = ProductUpdate
    export type UpdateAdminProductApiAdminProductsProductIdPatchMutationError = HTTPValidationError

    /**
 * @summary Update Admin Product
 */
export const useUpdateAdminProductApiAdminProductsProductIdPatch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminProductApiAdminProductsProductIdPatch>>, TError,{productId: string;data: ProductUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAdminProductApiAdminProductsProductIdPatch>>,
        TError,
        {productId: string;data: ProductUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateAdminProductApiAdminProductsProductIdPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ñ—Ñ–ª–∞–π–Ω –ø–æ–∫—É–ø–æ–∫ –∏ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∞
 * @summary Update Product Offline Purchases
 */
export const updateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatch = (
    productId: string,
    productOfflineUpdate: ProductOfflineUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<ProductInDB>(
      {url: `/api/admin/products/${productId}/offline`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: productOfflineUpdate
    },
      options);
    }
  


export const getUpdateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatch>>, TError,{productId: string;data: ProductOfflineUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatch>>, TError,{productId: string;data: ProductOfflineUpdate}, TContext> => {

const mutationKey = ['updateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatch>>, {productId: string;data: ProductOfflineUpdate}> = (props) => {
          const {productId,data} = props ?? {};

          return  updateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatch(productId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatch>>>
    export type UpdateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatchMutationBody = ProductOfflineUpdate
    export type UpdateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatchMutationError = HTTPValidationError

    /**
 * @summary Update Product Offline Purchases
 */
export const useUpdateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatch>>, TError,{productId: string;data: ProductOfflineUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatch>>,
        TError,
        {productId: string;data: ProductOfflineUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateProductOfflinePurchasesApiAdminProductsProductIdOfflinePatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get Admin Orders
 */
export const getAdminOrdersApiAdminOrdersGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrderInDB[]>(
      {url: `/api/admin/orders`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminOrdersApiAdminOrdersGetQueryKey = () => {
    return [`/api/admin/orders`] as const;
    }

    
export const getGetAdminOrdersApiAdminOrdersGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminOrdersApiAdminOrdersGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>> = ({ signal }) => getAdminOrdersApiAdminOrdersGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminOrdersApiAdminOrdersGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>>
export type GetAdminOrdersApiAdminOrdersGetQueryError = unknown


export function useGetAdminOrdersApiAdminOrdersGet<TData = Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminOrdersApiAdminOrdersGet<TData = Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminOrdersApiAdminOrdersGet<TData = Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Orders
 */

export function useGetAdminOrdersApiAdminOrdersGet<TData = Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminOrdersApiAdminOrdersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminOrdersApiAdminOrdersGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Update Admin Order Status
 */
export const updateAdminOrderStatusApiAdminOrdersOrderIdPatch = (
    orderId: string,
    orderUpdateStatus: OrderUpdateStatus,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<OrderInDB>(
      {url: `/api/admin/orders/${orderId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: orderUpdateStatus
    },
      options);
    }
  


export const getUpdateAdminOrderStatusApiAdminOrdersOrderIdPatchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminOrderStatusApiAdminOrdersOrderIdPatch>>, TError,{orderId: string;data: OrderUpdateStatus}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateAdminOrderStatusApiAdminOrdersOrderIdPatch>>, TError,{orderId: string;data: OrderUpdateStatus}, TContext> => {

const mutationKey = ['updateAdminOrderStatusApiAdminOrdersOrderIdPatch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAdminOrderStatusApiAdminOrdersOrderIdPatch>>, {orderId: string;data: OrderUpdateStatus}> = (props) => {
          const {orderId,data} = props ?? {};

          return  updateAdminOrderStatusApiAdminOrdersOrderIdPatch(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAdminOrderStatusApiAdminOrdersOrderIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdminOrderStatusApiAdminOrdersOrderIdPatch>>>
    export type UpdateAdminOrderStatusApiAdminOrdersOrderIdPatchMutationBody = OrderUpdateStatus
    export type UpdateAdminOrderStatusApiAdminOrdersOrderIdPatchMutationError = HTTPValidationError

    /**
 * @summary Update Admin Order Status
 */
export const useUpdateAdminOrderStatusApiAdminOrdersOrderIdPatch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminOrderStatusApiAdminOrdersOrderIdPatch>>, TError,{orderId: string;data: OrderUpdateStatus}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAdminOrderStatusApiAdminOrdersOrderIdPatch>>,
        TError,
        {orderId: string;data: OrderUpdateStatus},
        TContext
      > => {

      const mutationOptions = getUpdateAdminOrderStatusApiAdminOrdersOrderIdPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 * @summary Delete Admin Order
 */
export const deleteAdminOrderApiAdminOrdersOrderIdDelete = (
    orderId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/admin/orders/${orderId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminOrderApiAdminOrdersOrderIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminOrderApiAdminOrdersOrderIdDelete>>, TError,{orderId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminOrderApiAdminOrdersOrderIdDelete>>, TError,{orderId: string}, TContext> => {

const mutationKey = ['deleteAdminOrderApiAdminOrdersOrderIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminOrderApiAdminOrdersOrderIdDelete>>, {orderId: string}> = (props) => {
          const {orderId} = props ?? {};

          return  deleteAdminOrderApiAdminOrdersOrderIdDelete(orderId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminOrderApiAdminOrdersOrderIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminOrderApiAdminOrdersOrderIdDelete>>>
    
    export type DeleteAdminOrderApiAdminOrdersOrderIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Admin Order
 */
export const useDeleteAdminOrderApiAdminOrdersOrderIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminOrderApiAdminOrdersOrderIdDelete>>, TError,{orderId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminOrderApiAdminOrdersOrderIdDelete>>,
        TError,
        {orderId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminOrderApiAdminOrdersOrderIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 * @summary Edit Admin Order
 */
export const editAdminOrderApiAdminOrdersOrderIdEditPatch = (
    orderId: string,
    orderEdit: OrderEdit,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<OrderInDB>(
      {url: `/api/admin/orders/${orderId}/edit`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: orderEdit
    },
      options);
    }
  


export const getEditAdminOrderApiAdminOrdersOrderIdEditPatchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editAdminOrderApiAdminOrdersOrderIdEditPatch>>, TError,{orderId: string;data: OrderEdit}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof editAdminOrderApiAdminOrdersOrderIdEditPatch>>, TError,{orderId: string;data: OrderEdit}, TContext> => {

const mutationKey = ['editAdminOrderApiAdminOrdersOrderIdEditPatch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof editAdminOrderApiAdminOrdersOrderIdEditPatch>>, {orderId: string;data: OrderEdit}> = (props) => {
          const {orderId,data} = props ?? {};

          return  editAdminOrderApiAdminOrdersOrderIdEditPatch(orderId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type EditAdminOrderApiAdminOrdersOrderIdEditPatchMutationResult = NonNullable<Awaited<ReturnType<typeof editAdminOrderApiAdminOrdersOrderIdEditPatch>>>
    export type EditAdminOrderApiAdminOrdersOrderIdEditPatchMutationBody = OrderEdit
    export type EditAdminOrderApiAdminOrdersOrderIdEditPatchMutationError = HTTPValidationError

    /**
 * @summary Edit Admin Order
 */
export const useEditAdminOrderApiAdminOrdersOrderIdEditPatch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof editAdminOrderApiAdminOrdersOrderIdEditPatch>>, TError,{orderId: string;data: OrderEdit}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof editAdminOrderApiAdminOrdersOrderIdEditPatch>>,
        TError,
        {orderId: string;data: OrderEdit},
        TContext
      > => {

      const mutationOptions = getEditAdminOrderApiAdminOrdersOrderIdEditPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 * @summary Get Admin Users
 */
export const getAdminUsersApiAdminUsersGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserInDB[]>(
      {url: `/api/admin/users`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminUsersApiAdminUsersGetQueryKey = () => {
    return [`/api/admin/users`] as const;
    }

    
export const getGetAdminUsersApiAdminUsersGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminUsersApiAdminUsersGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>> = ({ signal }) => getAdminUsersApiAdminUsersGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminUsersApiAdminUsersGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>>
export type GetAdminUsersApiAdminUsersGetQueryError = unknown


export function useGetAdminUsersApiAdminUsersGet<TData = Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminUsersApiAdminUsersGet<TData = Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminUsersApiAdminUsersGet<TData = Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin Users
 */

export function useGetAdminUsersApiAdminUsersGet<TData = Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUsersApiAdminUsersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminUsersApiAdminUsersGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 * @summary Create Admin User
 */
export const createAdminUserApiAdminUsersPost = (
    userCreate: UserCreate,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserInDB>(
      {url: `/api/admin/users`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: userCreate, signal
    },
      options);
    }
  


export const getCreateAdminUserApiAdminUsersPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminUserApiAdminUsersPost>>, TError,{data: UserCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createAdminUserApiAdminUsersPost>>, TError,{data: UserCreate}, TContext> => {

const mutationKey = ['createAdminUserApiAdminUsersPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createAdminUserApiAdminUsersPost>>, {data: UserCreate}> = (props) => {
          const {data} = props ?? {};

          return  createAdminUserApiAdminUsersPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateAdminUserApiAdminUsersPostMutationResult = NonNullable<Awaited<ReturnType<typeof createAdminUserApiAdminUsersPost>>>
    export type CreateAdminUserApiAdminUsersPostMutationBody = UserCreate
    export type CreateAdminUserApiAdminUsersPostMutationError = HTTPValidationError

    /**
 * @summary Create Admin User
 */
export const useCreateAdminUserApiAdminUsersPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createAdminUserApiAdminUsersPost>>, TError,{data: UserCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createAdminUserApiAdminUsersPost>>,
        TError,
        {data: UserCreate},
        TContext
      > => {

      const mutationOptions = getCreateAdminUserApiAdminUsersPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 * @summary Get Admin User
 */
export const getAdminUserApiAdminUsersUserIdGet = (
    userId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<UserInDB>(
      {url: `/api/admin/users/${userId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAdminUserApiAdminUsersUserIdGetQueryKey = (userId: string,) => {
    return [`/api/admin/users/${userId}`] as const;
    }

    
export const getGetAdminUserApiAdminUsersUserIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>, TError = HTTPValidationError>(userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAdminUserApiAdminUsersUserIdGetQueryKey(userId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>> = ({ signal }) => getAdminUserApiAdminUsersUserIdGet(userId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(userId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAdminUserApiAdminUsersUserIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>>
export type GetAdminUserApiAdminUsersUserIdGetQueryError = HTTPValidationError


export function useGetAdminUserApiAdminUsersUserIdGet<TData = Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>, TError = HTTPValidationError>(
 userId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminUserApiAdminUsersUserIdGet<TData = Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>, TError = HTTPValidationError>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>,
          TError,
          Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAdminUserApiAdminUsersUserIdGet<TData = Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>, TError = HTTPValidationError>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Admin User
 */

export function useGetAdminUserApiAdminUsersUserIdGet<TData = Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>, TError = HTTPValidationError>(
 userId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAdminUserApiAdminUsersUserIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAdminUserApiAdminUsersUserIdGetQueryOptions(userId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 * @summary Update Admin User
 */
export const updateAdminUserApiAdminUsersUserIdPatch = (
    userId: string,
    userUpdate: UserUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<UserInDB>(
      {url: `/api/admin/users/${userId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: userUpdate
    },
      options);
    }
  


export const getUpdateAdminUserApiAdminUsersUserIdPatchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminUserApiAdminUsersUserIdPatch>>, TError,{userId: string;data: UserUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateAdminUserApiAdminUsersUserIdPatch>>, TError,{userId: string;data: UserUpdate}, TContext> => {

const mutationKey = ['updateAdminUserApiAdminUsersUserIdPatch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateAdminUserApiAdminUsersUserIdPatch>>, {userId: string;data: UserUpdate}> = (props) => {
          const {userId,data} = props ?? {};

          return  updateAdminUserApiAdminUsersUserIdPatch(userId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateAdminUserApiAdminUsersUserIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateAdminUserApiAdminUsersUserIdPatch>>>
    export type UpdateAdminUserApiAdminUsersUserIdPatchMutationBody = UserUpdate
    export type UpdateAdminUserApiAdminUsersUserIdPatchMutationError = HTTPValidationError

    /**
 * @summary Update Admin User
 */
export const useUpdateAdminUserApiAdminUsersUserIdPatch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateAdminUserApiAdminUsersUserIdPatch>>, TError,{userId: string;data: UserUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateAdminUserApiAdminUsersUserIdPatch>>,
        TError,
        {userId: string;data: UserUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateAdminUserApiAdminUsersUserIdPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
 * @summary Delete Admin User
 */
export const deleteAdminUserApiAdminUsersUserIdDelete = (
    userId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/admin/users/${userId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteAdminUserApiAdminUsersUserIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminUserApiAdminUsersUserIdDelete>>, TError,{userId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAdminUserApiAdminUsersUserIdDelete>>, TError,{userId: string}, TContext> => {

const mutationKey = ['deleteAdminUserApiAdminUsersUserIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAdminUserApiAdminUsersUserIdDelete>>, {userId: string}> = (props) => {
          const {userId} = props ?? {};

          return  deleteAdminUserApiAdminUsersUserIdDelete(userId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAdminUserApiAdminUsersUserIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAdminUserApiAdminUsersUserIdDelete>>>
    
    export type DeleteAdminUserApiAdminUsersUserIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Admin User
 */
export const useDeleteAdminUserApiAdminUsersUserIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAdminUserApiAdminUsersUserIdDelete>>, TError,{userId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteAdminUserApiAdminUsersUserIdDelete>>,
        TError,
        {userId: string},
        TContext
      > => {

      const mutationOptions = getDeleteAdminUserApiAdminUsersUserIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get Cart
 */
export const getCartApiCartGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CartItemWithProduct[]>(
      {url: `/api/cart`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCartApiCartGetQueryKey = () => {
    return [`/api/cart`] as const;
    }

    
export const getGetCartApiCartGetQueryOptions = <TData = Awaited<ReturnType<typeof getCartApiCartGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCartApiCartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCartApiCartGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCartApiCartGet>>> = ({ signal }) => getCartApiCartGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCartApiCartGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCartApiCartGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCartApiCartGet>>>
export type GetCartApiCartGetQueryError = unknown


export function useGetCartApiCartGet<TData = Awaited<ReturnType<typeof getCartApiCartGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCartApiCartGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCartApiCartGet>>,
          TError,
          Awaited<ReturnType<typeof getCartApiCartGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCartApiCartGet<TData = Awaited<ReturnType<typeof getCartApiCartGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCartApiCartGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCartApiCartGet>>,
          TError,
          Awaited<ReturnType<typeof getCartApiCartGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCartApiCartGet<TData = Awaited<ReturnType<typeof getCartApiCartGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCartApiCartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Cart
 */

export function useGetCartApiCartGet<TData = Awaited<ReturnType<typeof getCartApiCartGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCartApiCartGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCartApiCartGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É
 * @summary Clear Cart
 */
export const clearCartApiCartDelete = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/cart`, method: 'DELETE'
    },
      options);
    }
  


export const getClearCartApiCartDeleteMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearCartApiCartDelete>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof clearCartApiCartDelete>>, TError,void, TContext> => {

const mutationKey = ['clearCartApiCartDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof clearCartApiCartDelete>>, void> = () => {
          

          return  clearCartApiCartDelete(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ClearCartApiCartDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof clearCartApiCartDelete>>>
    
    export type ClearCartApiCartDeleteMutationError = unknown

    /**
 * @summary Clear Cart
 */
export const useClearCartApiCartDelete = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof clearCartApiCartDelete>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof clearCartApiCartDelete>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getClearCartApiCartDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
 * @summary Add To Cart
 */
export const addToCartApiCartAddPost = (
    cartItemAdd: CartItemAdd,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CartItemInDB>(
      {url: `/api/cart/add`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: cartItemAdd, signal
    },
      options);
    }
  


export const getAddToCartApiCartAddPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToCartApiCartAddPost>>, TError,{data: CartItemAdd}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof addToCartApiCartAddPost>>, TError,{data: CartItemAdd}, TContext> => {

const mutationKey = ['addToCartApiCartAddPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addToCartApiCartAddPost>>, {data: CartItemAdd}> = (props) => {
          const {data} = props ?? {};

          return  addToCartApiCartAddPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddToCartApiCartAddPostMutationResult = NonNullable<Awaited<ReturnType<typeof addToCartApiCartAddPost>>>
    export type AddToCartApiCartAddPostMutationBody = CartItemAdd
    export type AddToCartApiCartAddPostMutationError = HTTPValidationError

    /**
 * @summary Add To Cart
 */
export const useAddToCartApiCartAddPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToCartApiCartAddPost>>, TError,{data: CartItemAdd}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addToCartApiCartAddPost>>,
        TError,
        {data: CartItemAdd},
        TContext
      > => {

      const mutationOptions = getAddToCartApiCartAddPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
 * @summary Update Cart Item
 */
export const updateCartItemApiCartItemIdPatch = (
    itemId: string,
    cartItemUpdate: CartItemUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CartItemInDB>(
      {url: `/api/cart/${itemId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: cartItemUpdate
    },
      options);
    }
  


export const getUpdateCartItemApiCartItemIdPatchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCartItemApiCartItemIdPatch>>, TError,{itemId: string;data: CartItemUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof updateCartItemApiCartItemIdPatch>>, TError,{itemId: string;data: CartItemUpdate}, TContext> => {

const mutationKey = ['updateCartItemApiCartItemIdPatch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof updateCartItemApiCartItemIdPatch>>, {itemId: string;data: CartItemUpdate}> = (props) => {
          const {itemId,data} = props ?? {};

          return  updateCartItemApiCartItemIdPatch(itemId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type UpdateCartItemApiCartItemIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof updateCartItemApiCartItemIdPatch>>>
    export type UpdateCartItemApiCartItemIdPatchMutationBody = CartItemUpdate
    export type UpdateCartItemApiCartItemIdPatchMutationError = HTTPValidationError

    /**
 * @summary Update Cart Item
 */
export const useUpdateCartItemApiCartItemIdPatch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof updateCartItemApiCartItemIdPatch>>, TError,{itemId: string;data: CartItemUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof updateCartItemApiCartItemIdPatch>>,
        TError,
        {itemId: string;data: CartItemUpdate},
        TContext
      > => {

      const mutationOptions = getUpdateCartItemApiCartItemIdPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
 * @summary Remove From Cart
 */
export const removeFromCartApiCartItemIdDelete = (
    itemId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/cart/${itemId}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveFromCartApiCartItemIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeFromCartApiCartItemIdDelete>>, TError,{itemId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof removeFromCartApiCartItemIdDelete>>, TError,{itemId: string}, TContext> => {

const mutationKey = ['removeFromCartApiCartItemIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeFromCartApiCartItemIdDelete>>, {itemId: string}> = (props) => {
          const {itemId} = props ?? {};

          return  removeFromCartApiCartItemIdDelete(itemId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveFromCartApiCartItemIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof removeFromCartApiCartItemIdDelete>>>
    
    export type RemoveFromCartApiCartItemIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Remove From Cart
 */
export const useRemoveFromCartApiCartItemIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeFromCartApiCartItemIdDelete>>, TError,{itemId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof removeFromCartApiCartItemIdDelete>>,
        TError,
        {itemId: string},
        TContext
      > => {

      const mutationOptions = getRemoveFromCartApiCartItemIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Merge Cart
 */
export const mergeCartApiCartMergePost = (
    cartMergeRequest: CartMergeRequest,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CartItemInDB[]>(
      {url: `/api/cart/merge`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: cartMergeRequest, signal
    },
      options);
    }
  


export const getMergeCartApiCartMergePostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mergeCartApiCartMergePost>>, TError,{data: CartMergeRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof mergeCartApiCartMergePost>>, TError,{data: CartMergeRequest}, TContext> => {

const mutationKey = ['mergeCartApiCartMergePost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof mergeCartApiCartMergePost>>, {data: CartMergeRequest}> = (props) => {
          const {data} = props ?? {};

          return  mergeCartApiCartMergePost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MergeCartApiCartMergePostMutationResult = NonNullable<Awaited<ReturnType<typeof mergeCartApiCartMergePost>>>
    export type MergeCartApiCartMergePostMutationBody = CartMergeRequest
    export type MergeCartApiCartMergePostMutationError = HTTPValidationError

    /**
 * @summary Merge Cart
 */
export const useMergeCartApiCartMergePost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof mergeCartApiCartMergePost>>, TError,{data: CartMergeRequest}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof mergeCartApiCartMergePost>>,
        TError,
        {data: CartMergeRequest},
        TContext
      > => {

      const mutationOptions = getMergeCartApiCartMergePostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Get Categories
 */
export const getCategoriesApiCategoriesGet = (
    params?: GetCategoriesApiCategoriesGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CategoryInDB[]>(
      {url: `/api/categories`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetCategoriesApiCategoriesGetQueryKey = (params?: GetCategoriesApiCategoriesGetParams,) => {
    return [`/api/categories`, ...(params ? [params]: [])] as const;
    }

    
export const getGetCategoriesApiCategoriesGetQueryOptions = <TData = Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError = HTTPValidationError>(params?: GetCategoriesApiCategoriesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoriesApiCategoriesGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>> = ({ signal }) => getCategoriesApiCategoriesGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetCategoriesApiCategoriesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>>
export type GetCategoriesApiCategoriesGetQueryError = HTTPValidationError


export function useGetCategoriesApiCategoriesGet<TData = Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError = HTTPValidationError>(
 params: undefined |  GetCategoriesApiCategoriesGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoriesApiCategoriesGet<TData = Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError = HTTPValidationError>(
 params?: GetCategoriesApiCategoriesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>,
          TError,
          Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetCategoriesApiCategoriesGet<TData = Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError = HTTPValidationError>(
 params?: GetCategoriesApiCategoriesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Categories
 */

export function useGetCategoriesApiCategoriesGet<TData = Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError = HTTPValidationError>(
 params?: GetCategoriesApiCategoriesGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategoriesApiCategoriesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetCategoriesApiCategoriesGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Bestsellers
 */
export const getBestsellersApiProductsBestsellersGet = (
    params?: GetBestsellersApiProductsBestsellersGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ProductInDB[]>(
      {url: `/api/products/bestsellers`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetBestsellersApiProductsBestsellersGetQueryKey = (params?: GetBestsellersApiProductsBestsellersGetParams,) => {
    return [`/api/products/bestsellers`, ...(params ? [params]: [])] as const;
    }

    
export const getGetBestsellersApiProductsBestsellersGetQueryOptions = <TData = Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>, TError = HTTPValidationError>(params?: GetBestsellersApiProductsBestsellersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetBestsellersApiProductsBestsellersGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>> = ({ signal }) => getBestsellersApiProductsBestsellersGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetBestsellersApiProductsBestsellersGetQueryResult = NonNullable<Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>>
export type GetBestsellersApiProductsBestsellersGetQueryError = HTTPValidationError


export function useGetBestsellersApiProductsBestsellersGet<TData = Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>, TError = HTTPValidationError>(
 params: undefined |  GetBestsellersApiProductsBestsellersGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>,
          TError,
          Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBestsellersApiProductsBestsellersGet<TData = Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>, TError = HTTPValidationError>(
 params?: GetBestsellersApiProductsBestsellersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>,
          TError,
          Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetBestsellersApiProductsBestsellersGet<TData = Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>, TError = HTTPValidationError>(
 params?: GetBestsellersApiProductsBestsellersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Bestsellers
 */

export function useGetBestsellersApiProductsBestsellersGet<TData = Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>, TError = HTTPValidationError>(
 params?: GetBestsellersApiProductsBestsellersGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getBestsellersApiProductsBestsellersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetBestsellersApiProductsBestsellersGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Product By Slug
 */
export const getProductBySlugApiProductsSlugProductSlugGet = (
    productSlug: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ProductInDB>(
      {url: `/api/products/slug/${productSlug}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetProductBySlugApiProductsSlugProductSlugGetQueryKey = (productSlug: string,) => {
    return [`/api/products/slug/${productSlug}`] as const;
    }

    
export const getGetProductBySlugApiProductsSlugProductSlugGetQueryOptions = <TData = Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>, TError = HTTPValidationError>(productSlug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductBySlugApiProductsSlugProductSlugGetQueryKey(productSlug);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>> = ({ signal }) => getProductBySlugApiProductsSlugProductSlugGet(productSlug, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(productSlug), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductBySlugApiProductsSlugProductSlugGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>>
export type GetProductBySlugApiProductsSlugProductSlugGetQueryError = HTTPValidationError


export function useGetProductBySlugApiProductsSlugProductSlugGet<TData = Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>, TError = HTTPValidationError>(
 productSlug: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>,
          TError,
          Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductBySlugApiProductsSlugProductSlugGet<TData = Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>, TError = HTTPValidationError>(
 productSlug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>,
          TError,
          Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductBySlugApiProductsSlugProductSlugGet<TData = Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>, TError = HTTPValidationError>(
 productSlug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Product By Slug
 */

export function useGetProductBySlugApiProductsSlugProductSlugGet<TData = Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>, TError = HTTPValidationError>(
 productSlug: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductBySlugApiProductsSlugProductSlugGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductBySlugApiProductsSlugProductSlugGetQueryOptions(productSlug,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Products By Category Slug
 */
export const getProductsByCategorySlugApiProductsCategoryCategorySlugGet = (
    categorySlug: string,
    params?: GetProductsByCategorySlugApiProductsCategoryCategorySlugGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ProductInDB[]>(
      {url: `/api/products/category/${categorySlug}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetProductsByCategorySlugApiProductsCategoryCategorySlugGetQueryKey = (categorySlug: string,
    params?: GetProductsByCategorySlugApiProductsCategoryCategorySlugGetParams,) => {
    return [`/api/products/category/${categorySlug}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetProductsByCategorySlugApiProductsCategoryCategorySlugGetQueryOptions = <TData = Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>, TError = HTTPValidationError>(categorySlug: string,
    params?: GetProductsByCategorySlugApiProductsCategoryCategorySlugGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductsByCategorySlugApiProductsCategoryCategorySlugGetQueryKey(categorySlug,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>> = ({ signal }) => getProductsByCategorySlugApiProductsCategoryCategorySlugGet(categorySlug,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(categorySlug), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductsByCategorySlugApiProductsCategoryCategorySlugGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>>
export type GetProductsByCategorySlugApiProductsCategoryCategorySlugGetQueryError = HTTPValidationError


export function useGetProductsByCategorySlugApiProductsCategoryCategorySlugGet<TData = Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>, TError = HTTPValidationError>(
 categorySlug: string,
    params: undefined |  GetProductsByCategorySlugApiProductsCategoryCategorySlugGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>,
          TError,
          Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsByCategorySlugApiProductsCategoryCategorySlugGet<TData = Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>, TError = HTTPValidationError>(
 categorySlug: string,
    params?: GetProductsByCategorySlugApiProductsCategoryCategorySlugGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>,
          TError,
          Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductsByCategorySlugApiProductsCategoryCategorySlugGet<TData = Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>, TError = HTTPValidationError>(
 categorySlug: string,
    params?: GetProductsByCategorySlugApiProductsCategoryCategorySlugGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Products By Category Slug
 */

export function useGetProductsByCategorySlugApiProductsCategoryCategorySlugGet<TData = Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>, TError = HTTPValidationError>(
 categorySlug: string,
    params?: GetProductsByCategorySlugApiProductsCategoryCategorySlugGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductsByCategorySlugApiProductsCategoryCategorySlugGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductsByCategorySlugApiProductsCategoryCategorySlugGetQueryOptions(categorySlug,params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Get Product By Id
 */
export const getProductByIdApiProductsProductIdGet = (
    productId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ProductInDB>(
      {url: `/api/products/${productId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetProductByIdApiProductsProductIdGetQueryKey = (productId: string,) => {
    return [`/api/products/${productId}`] as const;
    }

    
export const getGetProductByIdApiProductsProductIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>, TError = HTTPValidationError>(productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetProductByIdApiProductsProductIdGetQueryKey(productId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>> = ({ signal }) => getProductByIdApiProductsProductIdGet(productId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(productId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetProductByIdApiProductsProductIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>>
export type GetProductByIdApiProductsProductIdGetQueryError = HTTPValidationError


export function useGetProductByIdApiProductsProductIdGet<TData = Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>, TError = HTTPValidationError>(
 productId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>,
          TError,
          Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductByIdApiProductsProductIdGet<TData = Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>, TError = HTTPValidationError>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>,
          TError,
          Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetProductByIdApiProductsProductIdGet<TData = Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>, TError = HTTPValidationError>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Product By Id
 */

export function useGetProductByIdApiProductsProductIdGet<TData = Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>, TError = HTTPValidationError>(
 productId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getProductByIdApiProductsProductIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetProductByIdApiProductsProductIdGetQueryOptions(productId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Orders
 */
export const getUserOrdersApiOrdersGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrderInDB[]>(
      {url: `/api/orders`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserOrdersApiOrdersGetQueryKey = () => {
    return [`/api/orders`] as const;
    }

    
export const getGetUserOrdersApiOrdersGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserOrdersApiOrdersGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>> = ({ signal }) => getUserOrdersApiOrdersGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserOrdersApiOrdersGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>>
export type GetUserOrdersApiOrdersGetQueryError = unknown


export function useGetUserOrdersApiOrdersGet<TData = Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>,
          TError,
          Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserOrdersApiOrdersGet<TData = Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>,
          TError,
          Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserOrdersApiOrdersGet<TData = Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Orders
 */

export function useGetUserOrdersApiOrdersGet<TData = Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserOrdersApiOrdersGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserOrdersApiOrdersGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Create Order
 */
export const createOrderApiOrdersPost = (
    orderCreate: OrderCreate,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrderInDB>(
      {url: `/api/orders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: orderCreate, signal
    },
      options);
    }
  


export const getCreateOrderApiOrdersPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrderApiOrdersPost>>, TError,{data: OrderCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createOrderApiOrdersPost>>, TError,{data: OrderCreate}, TContext> => {

const mutationKey = ['createOrderApiOrdersPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrderApiOrdersPost>>, {data: OrderCreate}> = (props) => {
          const {data} = props ?? {};

          return  createOrderApiOrdersPost(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrderApiOrdersPostMutationResult = NonNullable<Awaited<ReturnType<typeof createOrderApiOrdersPost>>>
    export type CreateOrderApiOrdersPostMutationBody = OrderCreate
    export type CreateOrderApiOrdersPostMutationError = HTTPValidationError

    /**
 * @summary Create Order
 */
export const useCreateOrderApiOrdersPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrderApiOrdersPost>>, TError,{data: OrderCreate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createOrderApiOrdersPost>>,
        TError,
        {data: OrderCreate},
        TContext
      > => {

      const mutationOptions = getCreateOrderApiOrdersPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * @summary Delete Order
 */
export const deleteOrderApiOrdersDelete = (
    orderDelete: OrderDelete,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/orders`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: orderDelete
    },
      options);
    }
  


export const getDeleteOrderApiOrdersDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderApiOrdersDelete>>, TError,{data: OrderDelete}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteOrderApiOrdersDelete>>, TError,{data: OrderDelete}, TContext> => {

const mutationKey = ['deleteOrderApiOrdersDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteOrderApiOrdersDelete>>, {data: OrderDelete}> = (props) => {
          const {data} = props ?? {};

          return  deleteOrderApiOrdersDelete(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteOrderApiOrdersDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof deleteOrderApiOrdersDelete>>>
    export type DeleteOrderApiOrdersDeleteMutationBody = OrderDelete
    export type DeleteOrderApiOrdersDeleteMutationError = HTTPValidationError

    /**
 * @summary Delete Order
 */
export const useDeleteOrderApiOrdersDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteOrderApiOrdersDelete>>, TError,{data: OrderDelete}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof deleteOrderApiOrdersDelete>>,
        TError,
        {data: OrderDelete},
        TContext
      > => {

      const mutationOptions = getDeleteOrderApiOrdersDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Order
 */
export const getUserOrderApiOrdersOrderIdGet = (
    orderId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<OrderInDB>(
      {url: `/api/orders/${orderId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserOrderApiOrdersOrderIdGetQueryKey = (orderId: string,) => {
    return [`/api/orders/${orderId}`] as const;
    }

    
export const getGetUserOrderApiOrdersOrderIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>, TError = HTTPValidationError>(orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserOrderApiOrdersOrderIdGetQueryKey(orderId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>> = ({ signal }) => getUserOrderApiOrdersOrderIdGet(orderId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(orderId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserOrderApiOrdersOrderIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>>
export type GetUserOrderApiOrdersOrderIdGetQueryError = HTTPValidationError


export function useGetUserOrderApiOrdersOrderIdGet<TData = Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>, TError = HTTPValidationError>(
 orderId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>,
          TError,
          Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserOrderApiOrdersOrderIdGet<TData = Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>, TError = HTTPValidationError>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>,
          TError,
          Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserOrderApiOrdersOrderIdGet<TData = Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>, TError = HTTPValidationError>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Order
 */

export function useGetUserOrderApiOrdersOrderIdGet<TData = Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>, TError = HTTPValidationError>(
 orderId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserOrderApiOrdersOrderIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserOrderApiOrdersOrderIdGetQueryOptions(orderId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get Favorites
 */
export const getFavoritesApiFavoritesGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<FavouriteInDB[]>(
      {url: `/api/favorites`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFavoritesApiFavoritesGetQueryKey = () => {
    return [`/api/favorites`] as const;
    }

    
export const getGetFavoritesApiFavoritesGetQueryOptions = <TData = Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFavoritesApiFavoritesGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>> = ({ signal }) => getFavoritesApiFavoritesGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetFavoritesApiFavoritesGetQueryResult = NonNullable<Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>>
export type GetFavoritesApiFavoritesGetQueryError = unknown


export function useGetFavoritesApiFavoritesGet<TData = Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>,
          TError,
          Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFavoritesApiFavoritesGet<TData = Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>,
          TError,
          Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetFavoritesApiFavoritesGet<TData = Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Favorites
 */

export function useGetFavoritesApiFavoritesGet<TData = Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFavoritesApiFavoritesGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetFavoritesApiFavoritesGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
 * @summary Add To Favorites
 */
export const addToFavoritesApiFavoritesProductIdPost = (
    productId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<FavouriteInDB>(
      {url: `/api/favorites/${productId}`, method: 'POST', signal
    },
      options);
    }
  


export const getAddToFavoritesApiFavoritesProductIdPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToFavoritesApiFavoritesProductIdPost>>, TError,{productId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof addToFavoritesApiFavoritesProductIdPost>>, TError,{productId: string}, TContext> => {

const mutationKey = ['addToFavoritesApiFavoritesProductIdPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof addToFavoritesApiFavoritesProductIdPost>>, {productId: string}> = (props) => {
          const {productId} = props ?? {};

          return  addToFavoritesApiFavoritesProductIdPost(productId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type AddToFavoritesApiFavoritesProductIdPostMutationResult = NonNullable<Awaited<ReturnType<typeof addToFavoritesApiFavoritesProductIdPost>>>
    
    export type AddToFavoritesApiFavoritesProductIdPostMutationError = HTTPValidationError

    /**
 * @summary Add To Favorites
 */
export const useAddToFavoritesApiFavoritesProductIdPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof addToFavoritesApiFavoritesProductIdPost>>, TError,{productId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof addToFavoritesApiFavoritesProductIdPost>>,
        TError,
        {productId: string},
        TContext
      > => {

      const mutationOptions = getAddToFavoritesApiFavoritesProductIdPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
 * @summary Remove From Favorites
 */
export const removeFromFavoritesApiFavoritesProductIdDelete = (
    productId: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/api/favorites/${productId}`, method: 'DELETE'
    },
      options);
    }
  


export const getRemoveFromFavoritesApiFavoritesProductIdDeleteMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeFromFavoritesApiFavoritesProductIdDelete>>, TError,{productId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof removeFromFavoritesApiFavoritesProductIdDelete>>, TError,{productId: string}, TContext> => {

const mutationKey = ['removeFromFavoritesApiFavoritesProductIdDelete'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof removeFromFavoritesApiFavoritesProductIdDelete>>, {productId: string}> = (props) => {
          const {productId} = props ?? {};

          return  removeFromFavoritesApiFavoritesProductIdDelete(productId,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type RemoveFromFavoritesApiFavoritesProductIdDeleteMutationResult = NonNullable<Awaited<ReturnType<typeof removeFromFavoritesApiFavoritesProductIdDelete>>>
    
    export type RemoveFromFavoritesApiFavoritesProductIdDeleteMutationError = HTTPValidationError

    /**
 * @summary Remove From Favorites
 */
export const useRemoveFromFavoritesApiFavoritesProductIdDelete = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof removeFromFavoritesApiFavoritesProductIdDelete>>, TError,{productId: string}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof removeFromFavoritesApiFavoritesProductIdDelete>>,
        TError,
        {productId: string},
        TContext
      > => {

      const mutationOptions = getRemoveFromFavoritesApiFavoritesProductIdDeleteMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Notifications
 */
export const getUserNotificationsApiNotificationsGet = (
    params?: GetUserNotificationsApiNotificationsGetParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<NotificationInDB[]>(
      {url: `/api/notifications`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetUserNotificationsApiNotificationsGetQueryKey = (params?: GetUserNotificationsApiNotificationsGetParams,) => {
    return [`/api/notifications`, ...(params ? [params]: [])] as const;
    }

    
export const getGetUserNotificationsApiNotificationsGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>, TError = HTTPValidationError>(params?: GetUserNotificationsApiNotificationsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserNotificationsApiNotificationsGetQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>> = ({ signal }) => getUserNotificationsApiNotificationsGet(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserNotificationsApiNotificationsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>>
export type GetUserNotificationsApiNotificationsGetQueryError = HTTPValidationError


export function useGetUserNotificationsApiNotificationsGet<TData = Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>, TError = HTTPValidationError>(
 params: undefined |  GetUserNotificationsApiNotificationsGetParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserNotificationsApiNotificationsGet<TData = Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>, TError = HTTPValidationError>(
 params?: GetUserNotificationsApiNotificationsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserNotificationsApiNotificationsGet<TData = Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>, TError = HTTPValidationError>(
 params?: GetUserNotificationsApiNotificationsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Notifications
 */

export function useGetUserNotificationsApiNotificationsGet<TData = Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>, TError = HTTPValidationError>(
 params?: GetUserNotificationsApiNotificationsGetParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserNotificationsApiNotificationsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserNotificationsApiNotificationsGetQueryOptions(params,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
 * @summary Mark Notification Read
 */
export const markNotificationReadApiNotificationsNotificationIdPatch = (
    notificationId: string,
    notificationUpdate: NotificationUpdate,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<NotificationInDB>(
      {url: `/api/notifications/${notificationId}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: notificationUpdate
    },
      options);
    }
  


export const getMarkNotificationReadApiNotificationsNotificationIdPatchMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof markNotificationReadApiNotificationsNotificationIdPatch>>, TError,{notificationId: string;data: NotificationUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof markNotificationReadApiNotificationsNotificationIdPatch>>, TError,{notificationId: string;data: NotificationUpdate}, TContext> => {

const mutationKey = ['markNotificationReadApiNotificationsNotificationIdPatch'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof markNotificationReadApiNotificationsNotificationIdPatch>>, {notificationId: string;data: NotificationUpdate}> = (props) => {
          const {notificationId,data} = props ?? {};

          return  markNotificationReadApiNotificationsNotificationIdPatch(notificationId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MarkNotificationReadApiNotificationsNotificationIdPatchMutationResult = NonNullable<Awaited<ReturnType<typeof markNotificationReadApiNotificationsNotificationIdPatch>>>
    export type MarkNotificationReadApiNotificationsNotificationIdPatchMutationBody = NotificationUpdate
    export type MarkNotificationReadApiNotificationsNotificationIdPatchMutationError = HTTPValidationError

    /**
 * @summary Mark Notification Read
 */
export const useMarkNotificationReadApiNotificationsNotificationIdPatch = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof markNotificationReadApiNotificationsNotificationIdPatch>>, TError,{notificationId: string;data: NotificationUpdate}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof markNotificationReadApiNotificationsNotificationIdPatch>>,
        TError,
        {notificationId: string;data: NotificationUpdate},
        TContext
      > => {

      const mutationOptions = getMarkNotificationReadApiNotificationsNotificationIdPatchMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
 * @summary Mark All Notifications Read
 */
export const markAllNotificationsReadApiNotificationsMarkAllReadPost = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/notifications/mark-all-read`, method: 'POST', signal
    },
      options);
    }
  


export const getMarkAllNotificationsReadApiNotificationsMarkAllReadPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof markAllNotificationsReadApiNotificationsMarkAllReadPost>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof markAllNotificationsReadApiNotificationsMarkAllReadPost>>, TError,void, TContext> => {

const mutationKey = ['markAllNotificationsReadApiNotificationsMarkAllReadPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof markAllNotificationsReadApiNotificationsMarkAllReadPost>>, void> = () => {
          

          return  markAllNotificationsReadApiNotificationsMarkAllReadPost(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MarkAllNotificationsReadApiNotificationsMarkAllReadPostMutationResult = NonNullable<Awaited<ReturnType<typeof markAllNotificationsReadApiNotificationsMarkAllReadPost>>>
    
    export type MarkAllNotificationsReadApiNotificationsMarkAllReadPostMutationError = unknown

    /**
 * @summary Mark All Notifications Read
 */
export const useMarkAllNotificationsReadApiNotificationsMarkAllReadPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof markAllNotificationsReadApiNotificationsMarkAllReadPost>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof markAllNotificationsReadApiNotificationsMarkAllReadPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getMarkAllNotificationsReadApiNotificationsMarkAllReadPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @summary Get Unread Count
 */
export const getUnreadCountApiNotificationsUnreadCountGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/api/notifications/unread-count`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUnreadCountApiNotificationsUnreadCountGetQueryKey = () => {
    return [`/api/notifications/unread-count`] as const;
    }

    
export const getGetUnreadCountApiNotificationsUnreadCountGetQueryOptions = <TData = Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUnreadCountApiNotificationsUnreadCountGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>> = ({ signal }) => getUnreadCountApiNotificationsUnreadCountGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUnreadCountApiNotificationsUnreadCountGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>>
export type GetUnreadCountApiNotificationsUnreadCountGetQueryError = unknown


export function useGetUnreadCountApiNotificationsUnreadCountGet<TData = Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>,
          TError,
          Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUnreadCountApiNotificationsUnreadCountGet<TData = Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>,
          TError,
          Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUnreadCountApiNotificationsUnreadCountGet<TData = Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Unread Count
 */

export function useGetUnreadCountApiNotificationsUnreadCountGet<TData = Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUnreadCountApiNotificationsUnreadCountGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUnreadCountApiNotificationsUnreadCountGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Get User Chats
 */
export const getUserChatsApiChatsGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ChatInDB[]>(
      {url: `/api/chats`, method: 'GET', signal
    },
      options);
    }
  

export const getGetUserChatsApiChatsGetQueryKey = () => {
    return [`/api/chats`] as const;
    }

    
export const getGetUserChatsApiChatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getUserChatsApiChatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserChatsApiChatsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetUserChatsApiChatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserChatsApiChatsGet>>> = ({ signal }) => getUserChatsApiChatsGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getUserChatsApiChatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetUserChatsApiChatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getUserChatsApiChatsGet>>>
export type GetUserChatsApiChatsGetQueryError = unknown


export function useGetUserChatsApiChatsGet<TData = Awaited<ReturnType<typeof getUserChatsApiChatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserChatsApiChatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserChatsApiChatsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserChatsApiChatsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserChatsApiChatsGet<TData = Awaited<ReturnType<typeof getUserChatsApiChatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserChatsApiChatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getUserChatsApiChatsGet>>,
          TError,
          Awaited<ReturnType<typeof getUserChatsApiChatsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetUserChatsApiChatsGet<TData = Awaited<ReturnType<typeof getUserChatsApiChatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserChatsApiChatsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get User Chats
 */

export function useGetUserChatsApiChatsGet<TData = Awaited<ReturnType<typeof getUserChatsApiChatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getUserChatsApiChatsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetUserChatsApiChatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @summary Create Or Get Chat
 */
export const createOrGetChatApiChatsPost = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ChatInDB>(
      {url: `/api/chats`, method: 'POST', signal
    },
      options);
    }
  


export const getCreateOrGetChatApiChatsPostMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrGetChatApiChatsPost>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof createOrGetChatApiChatsPost>>, TError,void, TContext> => {

const mutationKey = ['createOrGetChatApiChatsPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof createOrGetChatApiChatsPost>>, void> = () => {
          

          return  createOrGetChatApiChatsPost(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CreateOrGetChatApiChatsPostMutationResult = NonNullable<Awaited<ReturnType<typeof createOrGetChatApiChatsPost>>>
    
    export type CreateOrGetChatApiChatsPostMutationError = unknown

    /**
 * @summary Create Or Get Chat
 */
export const useCreateOrGetChatApiChatsPost = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof createOrGetChatApiChatsPost>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof createOrGetChatApiChatsPost>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getCreateOrGetChatApiChatsPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ —á–∞—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
 * @summary Get Chat Detail
 */
export const getChatDetailApiChatsChatIdGet = (
    chatId: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ChatInDB>(
      {url: `/api/chats/${chatId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetChatDetailApiChatsChatIdGetQueryKey = (chatId: string,) => {
    return [`/api/chats/${chatId}`] as const;
    }

    
export const getGetChatDetailApiChatsChatIdGetQueryOptions = <TData = Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>, TError = HTTPValidationError>(chatId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetChatDetailApiChatsChatIdGetQueryKey(chatId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>> = ({ signal }) => getChatDetailApiChatsChatIdGet(chatId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(chatId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetChatDetailApiChatsChatIdGetQueryResult = NonNullable<Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>>
export type GetChatDetailApiChatsChatIdGetQueryError = HTTPValidationError


export function useGetChatDetailApiChatsChatIdGet<TData = Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>, TError = HTTPValidationError>(
 chatId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>,
          TError,
          Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetChatDetailApiChatsChatIdGet<TData = Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>, TError = HTTPValidationError>(
 chatId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>,
          TError,
          Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetChatDetailApiChatsChatIdGet<TData = Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>, TError = HTTPValidationError>(
 chatId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get Chat Detail
 */

export function useGetChatDetailApiChatsChatIdGet<TData = Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>, TError = HTTPValidationError>(
 chatId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getChatDetailApiChatsChatIdGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetChatDetailApiChatsChatIdGetQueryOptions(chatId,options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
 * @summary Send Message
 */
export const sendMessageApiChatsChatIdMessagesPost = (
    chatId: string,
    chatMessageSend: ChatMessageSend,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ChatMessageInDB>(
      {url: `/api/chats/${chatId}/messages`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: chatMessageSend, signal
    },
      options);
    }
  


export const getSendMessageApiChatsChatIdMessagesPostMutationOptions = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendMessageApiChatsChatIdMessagesPost>>, TError,{chatId: string;data: ChatMessageSend}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof sendMessageApiChatsChatIdMessagesPost>>, TError,{chatId: string;data: ChatMessageSend}, TContext> => {

const mutationKey = ['sendMessageApiChatsChatIdMessagesPost'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof sendMessageApiChatsChatIdMessagesPost>>, {chatId: string;data: ChatMessageSend}> = (props) => {
          const {chatId,data} = props ?? {};

          return  sendMessageApiChatsChatIdMessagesPost(chatId,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type SendMessageApiChatsChatIdMessagesPostMutationResult = NonNullable<Awaited<ReturnType<typeof sendMessageApiChatsChatIdMessagesPost>>>
    export type SendMessageApiChatsChatIdMessagesPostMutationBody = ChatMessageSend
    export type SendMessageApiChatsChatIdMessagesPostMutationError = HTTPValidationError

    /**
 * @summary Send Message
 */
export const useSendMessageApiChatsChatIdMessagesPost = <TError = HTTPValidationError,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof sendMessageApiChatsChatIdMessagesPost>>, TError,{chatId: string;data: ChatMessageSend}, TContext>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof sendMessageApiChatsChatIdMessagesPost>>,
        TError,
        {chatId: string;data: ChatMessageSend},
        TContext
      > => {

      const mutationOptions = getSendMessageApiChatsChatIdMessagesPostMutationOptions(options);

      return useMutation(mutationOptions , queryClient);
    }
    
/**
 * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 * @summary Get All Chats
 */
export const getAllChatsApiAdminChatsGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ChatInDB[]>(
      {url: `/api/admin/chats`, method: 'GET', signal
    },
      options);
    }
  

export const getGetAllChatsApiAdminChatsGetQueryKey = () => {
    return [`/api/admin/chats`] as const;
    }

    
export const getGetAllChatsApiAdminChatsGetQueryOptions = <TData = Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAllChatsApiAdminChatsGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>> = ({ signal }) => getAllChatsApiAdminChatsGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAllChatsApiAdminChatsGetQueryResult = NonNullable<Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>>
export type GetAllChatsApiAdminChatsGetQueryError = unknown


export function useGetAllChatsApiAdminChatsGet<TData = Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>,
          TError,
          Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllChatsApiAdminChatsGet<TData = Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>,
          TError,
          Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAllChatsApiAdminChatsGet<TData = Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get All Chats
 */

export function useGetAllChatsApiAdminChatsGet<TData = Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAllChatsApiAdminChatsGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAllChatsApiAdminChatsGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




/**
 * @summary Health Check
 */
export const healthCheckHealthGet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<unknown>(
      {url: `/health`, method: 'GET', signal
    },
      options);
    }
  

export const getHealthCheckHealthGetQueryKey = () => {
    return [`/health`] as const;
    }

    
export const getHealthCheckHealthGetQueryOptions = <TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getHealthCheckHealthGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof healthCheckHealthGet>>> = ({ signal }) => healthCheckHealthGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type HealthCheckHealthGetQueryResult = NonNullable<Awaited<ReturnType<typeof healthCheckHealthGet>>>
export type HealthCheckHealthGetQueryError = unknown


export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckHealthGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof healthCheckHealthGet>>,
          TError,
          Awaited<ReturnType<typeof healthCheckHealthGet>>
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health Check
 */

export function useHealthCheckHealthGet<TData = Awaited<ReturnType<typeof healthCheckHealthGet>>, TError = unknown>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof healthCheckHealthGet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getHealthCheckHealthGetQueryOptions(options)

  const query = useQuery(queryOptions , queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}




