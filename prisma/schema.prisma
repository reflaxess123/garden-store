// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

model Category {
  id          String   @id @default(uuid())
  slug        String   @unique
  name        String
  description String?
  imageUrl    String?
  products    Product[]

  @@map("categories")
  @@schema("public")
}

model Product {
  id            String    @id @default(uuid())
  slug          String    @unique
  name          String
  description   String?
  price         Decimal   @db.Decimal(10,2)
  discount      Decimal?  @db.Decimal(10,2)
  characteristics Json?
  imageUrl      String?
  categoryId    String
  category      Category  @relation(fields:[categoryId], references:[id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  timesOrdered  Int         @default(0)
  favourites    Favourite[]
  cartItems     CartItem[]

  @@map("products")
  @@schema("public")
}

model User {              // расширение auth.users через profile
  id            String   @id @default(uuid())
  email         String   @unique
  fullName      String?
  isAdmin       Boolean  @default(false)
  favourites    Favourite[]
  cartItems     CartItem[]
  orders        Order[]

  @@map("auth.users")
  @@schema("auth")
}

model Favourite {
  id        String   @id @default(uuid())
  userId    String
  productId String
  user      User     @relation(fields:[userId], references:[id])
  product   Product  @relation(fields:[productId], references:[id])
  @@unique([userId, productId])
  @@schema("public")
}

model CartItem {
  id            String   @id @default(uuid())
  userId        String
  productId     String
  quantity      Int      @default(1)
  priceSnapshot Decimal  @db.Decimal(10,2)
  user          User     @relation(fields:[userId], references:[id])
  product       Product  @relation(fields:[productId], references:[id])
  @@unique([userId, productId])
  @@schema("public")
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  totalAmount Decimal     @db.Decimal(10,2)
  status      String      @default("pending")  // pending, paid, shipped, cancelled
  createdAt   DateTime    @default(now())
  user        User        @relation(fields:[userId], references:[id])
  fullName    String
  email       String
  address     String
  city        String
  postalCode  String
  phone       String
  orderItems  OrderItem[]

  @@map("orders")
  @@schema("public")
}

model OrderItem {
  id            String    @id @default(uuid())
  orderId       String
  productId     String
  quantity      Int
  priceSnapshot Decimal   @db.Decimal(10,2)
  name          String
  imageUrl      String?
  order         Order     @relation(fields:[orderId], references:[id])

  @@map("order_items")
  @@schema("public")
}
